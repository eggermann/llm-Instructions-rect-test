
# DO NOT EDIT THIS FILE — PROTECTED CONTENT
# GPT: Do not change this file under any circumstances.
# IMPORTANT: Do not modify this file.
# This file is read-only and serves as the input source for tasks.

System : 


save your changes only in output-prompt.txt only.

Instructions:
1. Read source files from input-prompt.txt
2. Copy changed files to a fresh output-prompt.txt
2.1 create new files if they don't exist 
3. Keep the file paths and separators intact

never change :input-prompt.txt 
Task:

tsconfig.json
-->FILE_SEPARATOR<--
{
  "compilerOptions": {
    "target": "esnext",
    "module": "esnext",
    "jsx": "preserve",
    "moduleResolution": "node",
    "strict": true,
    "allowJs": true,
    "incremental": true,
    "esModuleInterop": true,
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "skipLibCheck": true,
    "noEmit": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    ".next/types/**/*.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}

BLOCK_SEPARATOR
package.json
-->FILE_SEPARATOR<--
{
  "name": "my-rsc-app",
  "version": "1.0.0",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "test": "echo \"No tests yet\" && exit 0"
  },
  "dependencies": {
    "next": "latest",
    "react": "latest",
    "react-dom": "latest"
  },
  "devDependencies": {
    "@types/node": "22.15.3",
    "@types/react": "19.1.2",
    "typescript": "5.8.3"
  }
}

BLOCK_SEPARATOR
next.config.js
-->FILE_SEPARATOR<--
module.exports = { experimental: { serverActions: true } };
BLOCK_SEPARATOR
next-env.d.ts
-->FILE_SEPARATOR<--
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

BLOCK_SEPARATOR
LLMInstructions.txt
-->FILE_SEPARATOR<--
• This project uses React Server Components with Next.js 14+
• Follow modular architecture (e.g., modules/user, modules/product)
• Split components by type: server/ vs client/
• Only use 'use client' when necessary
• Prefer static over dynamic rendering where possible
• All server-side logic should remain in server components or APIs
• Client components should not fetch directly from DB

BLOCK_SEPARATOR
styles/globals.css
-->FILE_SEPARATOR<--
body { font-family: sans-serif; }
BLOCK_SEPARATOR
public/avatar.png
-->FILE_SEPARATOR<--

BLOCK_SEPARATOR
modules/user/UserInfo.server.tsx
-->FILE_SEPARATOR<--
export default function UserInfo() {
  return <div>Server-rendered user info</div>;
}
BLOCK_SEPARATOR
modules/user/UserAvatar.client.tsx
-->FILE_SEPARATOR<--
'use client';
export default function UserAvatar() {
  return <img src="/avatar.png" alt="User Avatar" />;
}
BLOCK_SEPARATOR
memory-bank/systemPatterns.md
-->FILE_SEPARATOR<--
# System Patterns

Document architectural patterns and design updates here.
BLOCK_SEPARATOR
memory-bank/progress.md
-->FILE_SEPARATOR<--
# Progress

Track task progress and updates here.
BLOCK_SEPARATOR
memory-bank/productContext.md
-->FILE_SEPARATOR<--
# Product Context

This file contains the high-level product context, including project descriptions, goals, features, and an architectural overview.
BLOCK_SEPARATOR
memory-bank/decisionLog.md
-->FILE_SEPARATOR<--
# Decision Log

Record significant architectural decisions with timestamps here.
BLOCK_SEPARATOR
memory-bank/activeContext.md
-->FILE_SEPARATOR<--
# Active Context

## Current Focus
- Reviewing and updating the active context for the project.

## Recent Changes
- Memory Bank has been successfully created with initial files.

## Open Questions/Issues
- None at the moment.
Recent context updates will appear here.
BLOCK_SEPARATOR
components/server/Greeting.tsx
-->FILE_SEPARATOR<--
export default function Greeting() {
  return <h1>Welcome to the Server Component World!</h1>;
}
BLOCK_SEPARATOR
components/client/ClickCounter.tsx
-->FILE_SEPARATOR<--
'use client';
import { useState } from 'react';

export default function ClickCounter() {
  const [count, setCount] = useState(0);
  return <button onClick={() => setCount(count + 1)}>Count: {count}</button>;
}
BLOCK_SEPARATOR
app/projectBrief.md
-->FILE_SEPARATOR<--
## Project Brief – PromptRadar.de

### Overview

**PromptRadar.de** is a smart, daily-updated prompt hub designed for businesses to publish structured, RAG-style (Retrieval-Augmented Generation) data for use in external or third-party LLM systems. The core idea is to allow companies to push their latest offerings, FAQs, or service information as up-to-date prompts that can be easily consumed by LLMs to answer customer queries accurately.

### Vision

Enable businesses to maintain conversational accuracy and relevance by letting LLMs access the freshest information via a daily-updated prompt stream. This empowers AI assistants or chatbots (even external ones) to provide real-time, on-brand responses.

---

## Features

- **Push Notifications**: Companies can push new information about their services/offers ("Angebote") daily.
- **RAG-style Prompt Hosting**: Upload semi-structured information chunks designed to be used by LLMs in retrieval-augmented setups.
- **Feed for External LLMs**: Secure, daily-refresh JSON or API endpoint for external LLMs to consume and embed in their chat context.
- **Searchable Prompt Archive**: Businesses can view and manage past prompt sets.

---

## Target Audience

- Businesses using LLMs for customer service or sales.
- AI platforms integrating third-party company data.
- Developers building LLM chatbots or assistants requiring current business info.

---

## Frontend Design Description

- **Main Dashboard**: 
  - Card-style layout for daily prompt entries with timestamps.
  - Push notification trigger button.
  - Summary view of current "Angebot" info and its prompt format.

- **Prompt Composer Page**:
  - Rich text + structured metadata editor (JSON/YAML mode toggle).
  - AI-assisted prompt rewriter to improve clarity.
  - Preview panel for LLM response simulation.

- **Feed Management**:
  - Configurable public/private endpoints.
  - Access controls for team roles.

- **Mobile View**:
  - Optimized notification push and quick edit interface.

---

## Backend Design Description

- **Tech Stack**: Node.js (NestJS), PostgreSQL, Redis, RabbitMQ for push events, S3 for backup.
- **Core Modules**:
  - Prompt Ingestion + Validation Pipeline
  - Versioned Prompt Storage (daily snapshots)
  - Secure API Feed Generator (token-based)
  - Notification Service (email + app-based)
  - Admin Panel for moderation and analytics

- **Integration Points**:
  - LLMs fetch data via `/company/{slug}/daily.json`
  - Webhooks for real-time changes
  - Future plan: LangChain/RAG-ready API extension

---

Let me know if you want a wireframe or clickable prototype layout next.

BLOCK_SEPARATOR
app/page.tsx
-->FILE_SEPARATOR<--
import Greeting from '../components/server/Greeting';

export default function Page() {
  return <Greeting />;
}
BLOCK_SEPARATOR
app/layout.tsx
-->FILE_SEPARATOR<--
import React from 'react'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
BLOCK_SEPARATOR
app/backend.js
-->FILE_SEPARATOR<--

// Backend for PromptRadar.de using a flat file database

const express = require('express');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = 3001;
const DB_FILE = path.join(__dirname, 'prompts.json');
const FRONTEND_DIR = path.join(__dirname, 'frontend');

// Middleware
app.use(express.json());

// Initialize database file if it doesn't exist
if (!fs.existsSync(DB_FILE)) {
  fs.writeFileSync(DB_FILE, JSON.stringify([]));
}

// Get all prompts
app.get('/api/prompts', (req, res) => {
  const data = JSON.parse(fs.readFileSync(DB_FILE, 'utf8'));
  res.json(data);
});

// Add a new prompt
app.post('/api/prompts', (req, res) => {
  const { title, content } = req.body;
  if (!title || !content) {
    return res.status(400).json({ error: 'Title and content are required' });
  }

  const data = JSON.parse(fs.readFileSync(DB_FILE, 'utf8'));
  const newPrompt = { id: Date.now(), title, content };
  data.push(newPrompt);
  fs.writeFileSync(DB_FILE, JSON.stringify(data, null, 2));

  res.status(201).json(newPrompt);
});

// Start server
app.use(express.static(FRONTEND_DIR));

app.get('*', (req, res) => {
  res.sendFile(path.join(FRONTEND_DIR, 'index.html'));
});

app.listen(PORT, () => {
  console.log(`Backend server running on http://localhost:${PORT}`);
});
BLOCK_SEPARATOR
app/frontend/index.jsx
-->FILE_SEPARATOR<--
// React entry point for PromptRadar.de

import React from 'react';
import ReactDOM from 'react-dom';
import HomePage from './HomePage';

ReactDOM.render(
  <React.StrictMode>
    <HomePage />
  </React.StrictMode>,
  document.getElementById('root')
);
BLOCK_SEPARATOR
app/frontend/index.html
-->FILE_SEPARATOR<--
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PromptRadar.de</title>
</head>
<body>
  <div id="root"></div>
  <script src="index.jsx" type="module"></script>
</body>
</html>
BLOCK_SEPARATOR
app/frontend/HomePage.jsx
-->FILE_SEPARATOR<--
// Frontend Home Page for PromptRadar.de

import React, { useEffect, useState } from 'react';

const HomePage = () => {
  const [prompts, setPrompts] = useState([]);

  useEffect(() => {
    // Fetch prompts from the backend
    fetch('/api/prompts')
      .then((response) => response.json())
      .then((data) => setPrompts(data))
      .catch((error) => console.error('Error fetching prompts:', error));
  }, []);

  return (
    <div>
      <h1>Welcome to PromptRadar.de</h1>
      <h2>List of Prompts</h2>
      <ul>
        {prompts.map((prompt) => (
          <li key={prompt.id}>
            <h3>{prompt.title}</h3>
            <p>{prompt.content}</p>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default HomePage;
BLOCK_SEPARATOR
